
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
from Funtions import *
from tkinter import *
from root import *
from WebscrapingInstagram import *
from PIL import Image, ImageTk

# Explicit imports to satisfy Flake8



OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("./assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

window.geometry("800x600")
window.configure(bg = "#FFFFFF")
image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
window.wm_iconphoto(False, image_image_2)
window.title('Golden Bird')

canvas = Canvas(
    window,
    bg = "#111645",
    height = 600,
    width = 800,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    0.0,
    0.0,
    823.0,
    600.0,
    fill="#111645",
    outline="")



# Background image
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    400.0,
    300.0,
    image=image_image_1
)




# "Not a member?"

text = canvas.create_text(
        619.0,
        36.0,
        anchor="nw",
    text="Not a member ?",
    fill="#C4C4C4",
    font=("IstokWeb Regular", 12 * -1)
)





# Logo image

image_2 = canvas.create_image(
    375.0,
    122.0,
    image=image_image_2
)




# Opening the secound tab


    



# Sign Up Button
def relative_to_assets_root(path: str) -> Path:
    OUTPUT_PATH = Path(__file__).parent
    ASSETS_PATH = OUTPUT_PATH / Path("./assets/root")
    return ASSETS_PATH / Path(path)

def relative_to_assets_profile(path: str) -> Path:
    OUTPUT_PATH = Path(__file__).parent
    ASSETS_PATH = OUTPUT_PATH / Path("./assets/profile")
    return ASSETS_PATH / Path(path)



button_image_viewDetails = PhotoImage(
        file=relative_to_assets_root("button_3.png"))

image_image_Background = PhotoImage(
        file=relative_to_assets_root("image_1.png"))

image_image_logo = PhotoImage(
        file=relative_to_assets_root("image_2.png"))

button_image_Search = PhotoImage(
        file=relative_to_assets_root("button_1.png"))

button_image_EnterDetail = PhotoImage(
    file=relative_to_assets_root("button_2.png"))







def update():
    canvas.itemconfig(InvaildUsername, text="")
    canvas.itemconfig(InvaildPassword_V, text="")
    canvas.itemconfig(InvaildPassword, text="")
    username = entry_1.get()
    password = entry_2.get()
    password_V = entry_2_verify.get()
    registerd = registerUser(username,password)
    if registerd  == 1:
        if password_V ==  password:
            # All good
            entry_1.destroy()
            entry_2.destroy()
            button_1.destroy()
            button_2.destroy()
            canvas.delete(image_2)
            canvas.delete(text)
            Secoundtab(canvas,button_image_viewDetails,image_image_Background,image_image_logo,button_image_Search,button_image_EnterDetail)
        

        else:    
            entry_2.delete(0,"end")
            entry_2_verify.delete(0,"end")
            #Both Password must be the same    canvas.itemconfig(InvaildPassword_V, text="Both Password must be the same")
            canvas.itemconfig(InvaildPassword, text="Both Password must be the same")

    elif registerd == -1:
        # Password is not strong
        entry_2.delete(0,"end")
        entry_2_verify.delete(0,"end")
        canvas.itemconfig(InvaildPassword, text="Your password is not strong")
            
    elif registerd == -2:
        # Username alrady taken
        entry_1.delete(0,"end")
        entry_2.delete(0,"end")
        entry_2_verify.delete(0,"end")
        canvas.itemconfig(InvaildUsername, text="Username already taken")
    

def singup():
    button_2.configure(image = button_image_1,command = update)
    button_1.configure(image = button_image_2)
    entry_2_verify.place(x=275.0,y=401.0,width=195.0,height=28.0)
    canvas.itemconfig(text, text="Have an account")



button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    bg="#111645",
    activebackground = '#111645',
    borderwidth=0,
    highlightthickness=0,
    command=singup,
    relief="flat"
)
button_1.place(
    x=717.0,
    y=29.0,
    width=67.0,
    height=30.0
)



# "Invalid Username"
InvaildUsername = canvas.create_text(
        275.0,
        291.0,
        anchor="nw",
    text="",
    fill="#FF0000",
    font=("IstokWeb Regular", 12 * -1)
)




# Username entry
entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    372.5,
    322.0,
    #image=entry_image_1
)

def temp_text(e):
   entry_1.delete(0,"end")
   entry_1.configure(justify= CENTER,bg="#C4C4C4")

entry_1 = Entry(
    bd=0,
    bg="#302d2d",
    highlightthickness=0,
    font=('Century 12',10) ,
)
entry_1.insert(0, "Username")


entry_1.place(
    x=275.0,
    y=307.0,
    width=195.0,
    height=28.0
)
entry_1.bind("<FocusIn>", temp_text)






#Login Button



def login():
    canvas.itemconfig(InvaildPassword, text="")
    canvas.itemconfig(InvaildUsername, text="")
    username = entry_1.get()
    password = entry_2.get()
    

    
    Check = checkLogin(username,password)
    if Check == 1:
        entry_1.destroy()
        entry_2.destroy()
        button_1.destroy()
        button_2.destroy()
        canvas.delete(image_2)
        canvas.delete(text)
        Secoundtab(window,canvas,button_image_viewDetails,image_image_Background,image_image_logo,button_image_Search,button_image_EnterDetail)


        # All good
        # window.destroy()
        # Need to do
    elif Check == 0:
        # Incorrect Password
        entry_2.delete(0,"end")
        canvas.itemconfig(InvaildPassword, text="Invalid Password")
    elif Check == -1:
        # Incorrect Username
        entry_1.delete(0,"end")
        entry_2.delete(0,"end")
        canvas.itemconfig(InvaildUsername, text="Invalid Username")




button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    bg="#111645",
    activebackground = '#111645',
    borderwidth=0,
    highlightthickness=0,
    command=login,
    relief="flat"
)
button_2.place(
    x=342.0,
    y=451.0,
    width=67.0,
    height=30.0
)



# "Invalid Password"
InvaildPassword = canvas.create_text(
        275.0,
        339.0,
        anchor="nw",
    text="",
    fill="#FF0000",
    font=("IstokWeb Regular", 12 * -1)
)




# Password entry
entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))

entry_bg_2 = canvas.create_image(
    372.5,
    369.0,
    #image=entry_image_2
)


def temp_text(e):
   entry_2.delete(0,"end")
   entry_2.configure(show="*",justify= CENTER,bg="#C4C4C4")

entry_2 = Entry(
    bd=0,
    bg="#302d2d",
    font=('Century 12',10),
    highlightthickness=0
)
entry_2.insert(0, "Password")

entry_2.place(
    x=275.0,
    y=354.0,
    width=195.0,
    height=28.0
)

entry_2.bind("<FocusIn>", temp_text)



# "Both Password must be the same"
InvaildPassword_V = canvas.create_text(
        275.0,
        384.0,
        anchor="nw",
    text="",
    fill="#FF0000",
    font=("IstokWeb Regular", 12 * -1)
)


# Conform Password entry
entry_image_2_verify = PhotoImage(
    file=relative_to_assets("entry_2.png"))

entry_bg_2_verify = canvas.create_image(
    372.5,
    369.0,
    #image=entry_image_2
)


def temp_text(e):
   entry_2_verify.delete(0,"end")
   entry_2_verify.configure(show="*",justify= CENTER,bg="#C4C4C4")

entry_2_verify = Entry(
    bd=0,
    bg="#302d2d",
    font=('Century 12',10),
    highlightthickness=0
)
entry_2_verify.insert(0, "Confirm Password")



entry_2_verify.bind("<FocusIn>", temp_text)






window.resizable(False, False)
window.mainloop()
